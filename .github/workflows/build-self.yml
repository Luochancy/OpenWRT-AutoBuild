#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: OpenWrt Builder For Self (Optimized)

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL /workdir/openwrt
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Cache OpenWrt source and packages / 缓存OpenWrt源码和包
      uses: actions/cache@v4
      with:
        path: |
          /workdir/openwrt
          ~/.ccache
        key: openwrt-build-${{ runner.os }}-${{ hashFiles('.config', 'diy-part1.sh', 'diy-part2.sh') }}-${{ github.run_number }}
        restore-keys: |
          openwrt-build-${{ runner.os }}-${{ hashFiles('.config', 'diy-part1.sh', 'diy-part2.sh') }}-
          openwrt-build-${{ runner.os }}-
        fail-on-cache-miss: false

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Configure ccache for faster builds / 配置ccache加速编译
      run: |
        echo "🚀 配置ccache编译缓存... / Configuring ccache build cache..."
        cd openwrt
        
        # 启用ccache / Enable ccache
        echo 'CONFIG_CCACHE=y' >> .config
        
        # 设置ccache目录和配置 / Setup ccache directory and configuration
        mkdir -p ~/.ccache
        cat > ~/.ccache/ccache.conf << EOF
        max_size = 8G
        compression = true
        compression_level = 6
        sloppiness = file_macro,locale,time_macros
        EOF
        
        echo "✅ ccache配置完成，最大缓存8GB / ccache configured with 8GB max cache"

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware / 编译固件
      id: compile
      run: |
        cd openwrt
        
        # 获取CPU核心数 / Get CPU core count
        CPU_CORES=$(nproc)
        echo "🔧 检测到 $CPU_CORES 个CPU核心 / Detected $CPU_CORES CPU cores"
        echo "🚀 开始智能编译固件... / Starting intelligent firmware compilation..."
        
        # 设置编译优化参数 / Set compilation optimization parameters
        export MAKEFLAGS="-j$CPU_CORES"
        export FORCE_UNSAFE_CONFIGURE=1
        
        # 显示编译开始时间 / Show compilation start time
        echo "⏰ 编译开始时间 / Compilation start time: $(date '+%Y-%m-%d %H:%M:%S')"
        
        # Initialize compilation status
        COMPILE_SUCCESS=false
        COMPILE_METHOD=""
        
        # 第一次尝试：全核心编译 / First attempt: full-core compilation
        echo "=== 🔥 第一次编译尝试：使用 $CPU_CORES 个核心 / First compilation attempt: using $CPU_CORES cores ==="
        if make -j$CPU_CORES 2>&1 | tee compile.log; then
          echo "🎉 全核心编译成功！ / Full-core compilation successful!"
          COMPILE_METHOD="全核心 / Full-core ($CPU_CORES cores)"
          COMPILE_SUCCESS=true
        else
          echo "⚠️ 全核心编译失败，使用单核心详细模式重试... / Full-core compilation failed, retrying with single-core verbose mode..."
          
          # 第二次尝试：单核心详细输出 / Second attempt: single-core verbose output
          echo "=== 🐌 第二次编译尝试：单核心详细模式 / Second compilation attempt: single-core verbose mode ==="
          if make -j1 V=s 2>&1 | tee -a compile.log; then
            echo "✅ 单核心编译成功！ / Single-core compilation successful!"
            COMPILE_METHOD="单核心 / Single-core"
            COMPILE_SUCCESS=true
          else
            echo "❌ 编译完全失败 / Compilation completely failed"
            echo "📋 显示编译日志末尾 / Showing end of compilation log:"
            tail -n 50 compile.log
            exit 1
          fi
        fi
        
        # Check if compilation was actually successful
        if [ "$COMPILE_SUCCESS" = true ]; then
          # Verify that firmware files were generated
          if [ ! -d "bin/targets" ] || [ -z "$(find bin/targets -name '*.img*' -o -name '*.tar*' 2>/dev/null)" ]; then
            echo "❌ 编译完成但未找到固件文件 / Compilation completed but no firmware files found"
            exit 1
          fi
          
          # 显示编译完成时间 / Show compilation completion time
          echo "⏰ 编译完成时间 / Compilation completion time: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "🎯 编译方式 / Compilation method: $COMPILE_METHOD"
          
          echo "status=success" >> $GITHUB_OUTPUT
          echo "compile-method=$COMPILE_METHOD" >> $GITHUB_OUTPUT
        else
          echo "❌ 编译状态检查失败 / Compilation status check failed"
          exit 1
        fi
        
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: |
        echo "💾 检查磁盘使用情况... / Checking disk usage..."
        df -hT
        echo ""
        echo "📊 ccache统计信息 / ccache statistics:"
        ccache -s 2>/dev/null || echo "ccache统计不可用 / ccache statistics unavailable"
        echo ""
        echo "📁 固件大小信息 / Firmware size information:"
        if [ -d "openwrt/bin/targets" ]; then
          du -sh openwrt/bin/targets/*/*/ 2>/dev/null || echo "暂无固件文件 / No firmware files yet"
        fi

    - name: Upload bin directory
      uses: actions/upload-artifact@v4
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理固件文件 / Organize Firmware Files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        echo "📋 整理固件文件... / Organizing firmware files..."
        # Find the target directory safely
        TARGET_DIR=$(find openwrt/bin/targets -mindepth 2 -maxdepth 2 -type d | head -n 1)
        if [ -z "$TARGET_DIR" ]; then
          echo "Error: No target directory found in openwrt/bin/targets"
          exit 1
        fi
        echo "Found target directory: $TARGET_DIR"
        cd "$TARGET_DIR"
        rm -rf packages
        
        # Generate timestamp for filename modification
        TIMESTAMP=$(date +%s)
        echo "⏰ 生成时间戳: $TIMESTAMP / Generated timestamp: $TIMESTAMP"
        
        # Rename firmware files to include timestamp
        echo "🔄 重命名固件文件添加时间戳... / Renaming firmware files with timestamp..."
        for file in *; do
          if [ -f "$file" ]; then
            # Extract file extension
            if [[ "$file" == *.img.gz ]]; then
              # For .img.gz files: openwrt-xxx.img.gz -> openwrt-timestamp-xxx.img.gz
              new_name=$(echo "$file" | sed "s/^openwrt-/openwrt-${TIMESTAMP}-/")
            elif [[ "$file" == *.tar.gz ]]; then
              # For .tar.gz files: openwrt-xxx.tar.gz -> openwrt-timestamp-xxx.tar.gz
              new_name=$(echo "$file" | sed "s/^openwrt-/openwrt-${TIMESTAMP}-/")
            elif [[ "$file" == openwrt-* ]]; then
              # For other openwrt files
              new_name=$(echo "$file" | sed "s/^openwrt-/openwrt-${TIMESTAMP}-/")
            else
              # Keep original name for non-openwrt files
              new_name="$file"
            fi
            
            if [ "$file" != "$new_name" ]; then
              mv "$file" "$new_name"
              echo "✅ $file -> $new_name"
            fi
          fi
        done
        
        echo "📁 重命名后的固件文件列表 / Renamed firmware file list:"
        ls -la
        
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.4
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
