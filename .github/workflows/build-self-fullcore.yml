name: OpenWrt Builder For Self

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    name: Build OpenWrt Firmware | 构建OpenWrt固件
    runs-on: self-hosted
    outputs:
      firmware_dir: ${{ steps.organize.outputs.firmware_dir }}
      device_name: ${{ steps.device.outputs.device_name }}
      file_date: ${{ steps.device.outputs.file_date }}
      firmware_info: ${{ steps.fwinfo.outputs.firmware_info }}

    steps:
    - name: Checkout | 检出代码
      uses: actions/checkout@main

    - name: Initialization environment | 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        CORES=$(nproc)
        MEM=$(free -h | awk '/Mem:/ {print $2}')
        echo "💡 Build host: $CORES cores, $MEM RAM | 构建主机：$CORES核CPU，$MEM内存"
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL /workdir/openwrt
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code | 克隆源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds | 加载自定义feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds | 更新feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds | 安装feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration | 加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package | 下载包
      id: package
      run: |
        cd openwrt
        make defconfig
        CORES=$(nproc)
        echo "📦 Downloading packages with $CORES threads | 使用$CORES线程下载包"
        make download -j$CORES
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware (full core) | 全核心编译固件
      id: compile
      run: |
        cd openwrt
        CORES=$(nproc)
        echo "🚀 Using $CORES threads (detected by nproc) for compilation | 使用$CORES线程(自动检测)全核心编译"
        make -j$CORES || make -j1 V=s

    - name: Get device name and file date | 获取设备名和日期
      id: device
      run: |
        cd openwrt
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "device_name=_$(cat DEVICE_NAME)" >> $GITHUB_OUTPUT || echo "device_name=" >> $GITHUB_OUTPUT
        echo "file_date=_$(date +"%Y%m%d%H%M")" >> $GITHUB_OUTPUT

    - name: Organize Firmware Files | 整理固件文件
      id: organize
      run: |
        echo "📋 Organizing firmware files..."
        echo "📋 整理固件文件..."
        TARGET_DIR=$(find openwrt/bin/targets -mindepth 2 -maxdepth 2 -type d | head -n 1)
        if [ -z "$TARGET_DIR" ]; then
          echo "Error: No target directory found in openwrt/bin/targets"
          echo "错误：未在 openwrt/bin/targets 中找到目标目录"
          exit 1
        fi
        cd "$TARGET_DIR"
        rm -rf packages
        TS=$(date +%s)
        for file in openwrt-*; do
          if [ -f "$file" ]; then
            new_name=$(echo "$file" | sed "s/^openwrt-/openwrt-${TS}-/")
            [ "$file" != "$new_name" ] && mv "$file" "$new_name"
          fi
        done
        echo "firmware_dir=$PWD" >> $GITHUB_OUTPUT

    - name: Collect firmware info | 收集固件信息
      id: fwinfo
      run: |
        cd ${{ steps.organize.outputs.firmware_dir }}
        echo "| 文件名 (Filename) | 类型 (Type) | 大小 (Size) | SHA256 |" > firmware_info.md
        echo "| --- | --- | --- | --- |" >> firmware_info.md
        for f in *; do
          if [ -f "$f" ]; then
            TYPE=$(file -b "$f" | head -n1)
            SIZE=$(du -h "$f" | awk '{print $1}')
            SHA256=$(sha256sum "$f" | awk '{print $1}')
            echo "| $f | $TYPE | $SIZE | $SHA256 |" >> firmware_info.md
          fi
        done
        cat firmware_info.md
        echo "firmware_info=$PWD/firmware_info.md" >> $GITHUB_OUTPUT

    - name: Upload firmware artifact | 上传固件产物
      uses: actions/upload-artifact@main
      if: env.UPLOAD_FIRMWARE == 'true'
      with:
        name: OpenWrt_firmware${{ steps.device.outputs.device_name }}${{ steps.device.outputs.file_date }}
        path: |
          ${{ steps.organize.outputs.firmware_dir }}/*
          ${{ steps.fwinfo.outputs.firmware_info }}

  upload:
    name: Upload & Release | 上传和发布
    needs: build
    runs-on: self-hosted
    if: ${{ needs.build.outputs.firmware_dir != '' }}
    steps:
    - name: Download firmware artifact | 下载固件产物
      uses: actions/download-artifact@main
      with:
        name: OpenWrt_firmware${{ needs.build.outputs.device_name }}${{ needs.build.outputs.file_date }}
        path: firmware

    - name: Read firmware info | 读取固件信息
      id: readinfo
      run: |
        cat firmware/firmware_info.md
        echo "fwinfo_md=$(cat firmware/firmware_info.md | base64 -w0)" >> $GITHUB_OUTPUT

    - name: Generate release tag | 生成发布标签
      id: tag
      run: |
        echo "release_tag=LEDE-$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt

    - name: Upload firmware to release | 上传固件到发布页
      uses: softprops/action-gh-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body: |
          ## 固件文件列表 (Firmware File List)

          > 文件名、类型、大小、SHA256 校验值信息如下：  
          > Below are filename, type, size and SHA256 checksum of this build.

          ${{ steps.readinfo.outputs.fwinfo_md }}

        files: firmware/*
        name: ${{ steps.tag.outputs.release_tag }}

    - name: Delete workflow runs | 删除旧工作流
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases | 删除旧发布
      uses: dev-drprasad/delete-older-releases@master
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
